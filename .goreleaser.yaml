# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com

# The lines below are called `modelines`. See `:help modeline`
# Feel free to remove those if you don't want/need to use them.
# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj

version: 2

before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - env:
      - CGO_ENABLED=0
    goarch:
      - "386"
      - amd64
      - arm
      - arm64
      - ppc64
    goos:
      - linux
      - windows
      - darwin
    mod_timestamp: "{{ .CommitTimestamp }}"
    ldflags:
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{ .CommitDate }} -X main.builtBy=goreleaser -X main.treeState={{ .IsGitDirty }}

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        format: zip

changelog:
  # Set this to true if you don't want any changelog at all.
  #
  # Warning: this will also ignore any changelog files passed via `--release-notes`,
  # and will render an empty changelog.
  #
  # This may result in an empty release notes on GitHub/GitLab/Gitea.
  #
  # Templates: allowed.
  # disable: "{{ .Env.CREATE_CHANGELOG }}"

  # Changelog generation implementation to use.
  #
  # Valid options are:
  # - `git`: uses `git log`;
  # - `github`: uses the compare GitHub API, appending the author username to the changelog.
  # - `gitlab`: uses the compare GitLab API, appending the author name and email to the changelog (requires a personal access token).
  # - `gitea`: uses the compare Gitea API, appending the author username to the changelog.
  # - `github-native`: uses the GitHub release notes generation API, disables the groups feature.
  #
  # Default: 'git'.
  use: github

  # Format to use for commit formatting.
  # Only available when use is one of `github`, `gitea`, or `gitlab`.
  #
  # Default: '{{ .SHA }}: {{ .Message }} ({{ with .AuthorUsername }}@{{ . }}{{ else }}{{ .AuthorName }} <{{ .AuthorEmail }}>{{ end }})'.
  # Extra template fields: `SHA`, `Message`, `AuthorName`, `AuthorEmail`, and
  # `AuthorUsername`.
  format: "{{.SHA}}: {{.Message}} (@{{.AuthorUsername}})"

  # Sorts the changelog by the commit's messages.
  # Could either be asc, desc or empty
  # Empty means 'no sorting', it'll use the output of `git log` as is.
  sort: asc

  # Max commit hash length to use in the changelog.
  #
  # 0: use whatever the changelog implementation gives you
  # -1: remove the commit hash from the changelog
  # any other number: max length.
  abbrev: 7

  # Paths to filter the commits for.
  # Only works when `use: git`, otherwise ignored.
  #
  # This feature is only available in GoReleaser Pro.
  # Default: monorepo.dir value, or empty if no monorepo.
  # paths:
  #   - foo/
  #   - bar/

  # Group commits messages by given regex and title.
  # Order value defines the order of the groups.
  # Providing no regex means all commits will be grouped under the default group.
  #
  # Matches are performed against the first line of the commit message only,
  # prefixed with the commit SHA1, usually in the form of
  # `<abbrev-commit>[:] <title-commit>`.
  # Groups are disabled when using github-native, as it already groups things by itself.
  # Regex use RE2 syntax as defined here: https://github.com/google/re2/wiki/Syntax.
  # groups:
  #   - title: Features
  #     regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
  #     order: 0
  #   - title: "Bug fixes"
  #     regexp: '^.*?bug(\([[:word:]]+\))??!?:.+$'
  #     order: 1
  #   - title: Others
  #     order: 999
  groups:
    - title: Dependency updates
      regexp: '^.*?(.+)\(deps\)!?:.+$'
      order: 300
    - title: "New Features"
      regexp: '^.*?feat(\(.+\))??!?:.+$'
      order: 100
    - title: "Security updates"
      regexp: '^.*?sec(\(.+\))??!?:.+$'
      order: 150
    - title: "Bug fixes"
      regexp: '^.*?(fix|refactor)(\(.+\))??!?:.+$'
      order: 200
    - title: "Documentation updates"
      regexp: ^.*?docs?(\(.+\))??!?:.+$
      order: 400
    - title: "Build process updates"
      regexp: ^.*?(build|ci)(\(.+\))??!?:.+$
      order: 400
    - title: Other work
      order: 9999



  #     # A group can have subgroups.
  #     # If you use this, all the commits that match the parent group will also
  #     # be checked against its subgroups. If some of them matches, it'll be
  #     # grouped there, otherwise they'll remain not grouped.
  #     #
  #     # The title is optional - you can think of groups as a way to order
  #     # commits within a group.
  #     #
  #     # There can only be one level of subgroups, i.e.: a subgroup can't have
  #     # subgroups within it.
  #     #
  #     # This feature is only available in GoReleaser Pro.
  #     groups:
  #       - title: "Docs"
  #         regex: ".*docs.*"
  #         order: 1
  #       - title: "CI"
  #         regex: ".*build.*"
  #         order: 2

  # Divider to use between groups.
  #
  # This feature is only available in GoReleaser Pro.
  # divider: "---"

  filters:
    # Commit messages matching the regexp listed here will be removed from
    # the changelog
    #
    # Matches are performed against the first line of the commit message only,
    # prefixed with the commit SHA1, usually in the form of
    # `<abbrev-commit>[:] <title-commit>`.
    exclude:
      - "^docs:"
      - typo
      - (?i)foo
      - '(?i)^docs?:'
      - '(?i)^docs\([^:]+\):'
      - '(?i)^docs\[[^:]+\]:'
      - '^tests?:'
      - '(?i)^dev:'
      - '(?i)^chore:'
      - '^build\(deps\): bump .* in /docs \(#\d+\)'
      - '^build\(deps\): bump .* in /\.github/peril \(#\d+\)'
      - '^build\(deps\): bump .* in /scripts/gen_github_action_config \(#\d+\)'
      - Merge pull request
      - Merge branch

    # Commit messages matching the regexp listed here will be the only ones
    # added to the changelog
    #
    # If include is not-empty, exclude will be ignored.
    #
    # Matches are performed against the first line of the commit message only,
    # prefixed with the commit SHA1, usually in the form of
    # `<abbrev-commit>[:] <title-commit>`.
    # include:
    #   - "^feat:"

release:
  github:
    owner: neh-cli
    name: neh
  header: |
    `neh` is a CLI application that allows you to interact with AI.

brews:
  - repository:
      owner: neh-cli
      name: homebrew-tap
      token: "{{ .Env.TAP_GITHUB_TOKEN }}"
    # Alternative names for the current recipe.
    #
    # Useful if you want to publish a versioned formula as well, so users can
    # more easily downgrade.
    #
    # This feature is only available in GoReleaser Pro.
    # Templates: allowed.
    # alternative_names:
    #   - myproject@{{ .Version }}
    #   - myproject@{{ .Major }}

    goarm: 7

    # NOTE: make sure the url_template, the token and given repo (github or
    # gitlab) owner and name are from the same kind.
    # We will probably unify this in the next major version like it is
    # done with scoop.

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed.
    # url_template: "https://github.mycompany.com/foo/bar/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Directory inside the repository to put the formula.
    directory: Formula

    # Your app's homepage.
    #
    # Default: inferred from global metadata.
    homepage: "https://github.com/neh-cli/neh"

    # Your app's description.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    description: "neh is a sleek CLI application designed for high-speed, real-time interaction with AI specializing in Large Language Models."

    # SPDX identifier of your app's license.
    #
    # Default: inferred from global metadata.
    license: MIT

    # Custom block for brew.
    # Can be used to specify alternate downloads for devel or head releases.
    # custom_block: |
    #   head "https://github.com/some/package.git"
    #   ...

    # Packages your package depends on.
    dependencies:
      - name: git
        # Allow to specify the OS in which the dependency is required.
        # Valid options are `mac` and `linux`.
        # os: mac
        # - name: zsh
        #   type: optional
        #   - name: fish
        #     version: v1.2.3
        #   # if providing both version and type, only the type will be taken into
        #   # account.
        #   - name: elvish
        #     type: optional
        #     version: v1.2.3

    # So you can `brew test` your formula.
    #
    # Template: allowed
    test: |
      system "#{bin}/neh version"

    # Custom install script for brew.
    #
    # Template: allowed
    # Default: 'bin.install "BinaryName"'.
    # install: |
    #   bin.install "some_other_name"
    #   bash_completion.install "completions/foo.bash" => "foo"

    # Additional install instructions so you don't need to override `install`.
    #
    # Template: allowed
    # extra_install: |
    #   bash_completion.install "completions/foo.bash" => "foo"
    #   man1.install "man/foo.1.gz"

nfpms:
  - file_name_template: "{{ .ConventionalFileName }}"
    id: packages
    homepage: https://github.com/neh-cli/neh
    description: |-
      Lightweight CLI client for interacting with AI
      using large language models (LLM)
    maintainer: Atsushi Ishida <gipcompany@gmail.com>
    license: MIT
    vendor: neh-cli
    section: utils
    formats:
      - apk
      - deb
      - rpm
      - archlinux
    dependencies:
      - git
    recommends:
      - golang
    deb:
      lintian_overrides:
        - statically-linked-binary
        - changelog-file-missing-in-native-package
